<script setup lang="ts">
import { onMounted } from 'vue';
import { ref } from 'vue';
import PocketBase from 'pocketbase';

interface Todo {
  id: string;
  Title: string;          // Changed to match exact field name
  Description: string;    // Changed to match exact field name
  Completed: boolean;     // Added to match collection
  created: string;
  updated: string;
}

let pb: PocketBase | null = null;
const currentUser = ref();
const tasks = ref<Todo[]>([]);
const newTask = ref('');
const taskDescription = ref('');
const error = ref('');

// Fetch todos from PocketBase
const fetchTodos = async () => {
  if (!pb) return;
  error.value = '';
  
  try {
    const records = await pb.collection('Todos').getFullList({
      sort: '-created',
    });
    tasks.value = records.map((record: any) => ({
      id: record.id,
      Title: record.Title,
      Description: record.Description,
      Completed: record.Completed,
      created: record.created,
      updated: record.updated,
    }));
    
    console.log('Fetched todos:', records);
  } catch (err: any) {
    error.value = err?.message || 'Failed to fetch todos';
    console.error('Error fetching todos:', err);
  }
};

// Add task to PocketBase
const addTask = async () => {
  if (!pb) {
    error.value = 'Database not connected';
    return;
  }
  
  if (!newTask.value.trim()) {
    error.value = 'Title is required';
    return;
  }

  try {
    // Create the data object matching exact field names in PocketBase
    const data = {
      "Title": newTask.value.trim(),
      "Description": taskDescription.value.trim(),
      "Completed": false
    };

    console.log('Sending data to PocketBase:', data);

    const record = await pb.collection('Todos').create(data);
    console.log('Created record:', record);

    tasks.value.unshift({
      id: record.id,
      Title: record.Title,
      Description: record.Description,
      Completed: record.Completed,
      created: record.created,
      updated: record.updated,
    });
    
    // Clear input fields and error
    newTask.value = '';
    taskDescription.value = '';
    error.value = '';
  } catch (err: any) {
    console.error('Error creating todo:', err);
    console.error('Error details:', err?.data?.data);
    error.value = err?.message || 'Failed to create todo';
  }
};

// Toggle task completion
const toggleComplete = async (todo: Todo) => {
  if (!pb) return;
  error.value = '';

  try {
    const updated = await pb.collection('Todos').update(todo.id, {
      "Completed": !todo.Completed
    });
    
    // Update the local state
    const index = tasks.value.findIndex((t: Todo) => t.id === todo.id);
    if (index !== -1) {
      tasks.value[index] = {
        id: updated.id,
        Title: updated.Title,
        Description: updated.Description,
        Completed: updated.Completed,
        created: updated.created,
        updated: updated.updated,
      };
    }
  } catch (err: any) {
    error.value = err?.message || 'Failed to update todo';
    console.error('Error updating todo:', err);
  }
};

// Remove task from PocketBase
const removeTask = async (id: string, index: number) => {
  if (!pb) return;
  error.value = '';

  try {
    await pb.collection('Todos').delete(id);
    tasks.value.splice(index, 1);
  } catch (err: any) {
    error.value = err?.message || 'Failed to remove todo';
    console.error('Error removing todo:', err);
  }
};

onMounted(async () => {
  pb = new PocketBase('http://127.0.0.1:8090');
  await fetchTodos();
});
</script>

<template>
  <div>
    <NuxtRouteAnnouncer />
    <NuxtLayout />
    <div class="flex justify-center">
    <Card class="w-[350px] margin-auto">
      <CardHeader>
        <CardTitle>To-Do List</CardTitle>
        <CardDescription>Manage your tasks</CardDescription>
      </CardHeader>
      
      <CardContent>
        <!-- Error Display -->
        <div v-if="error" class="mb-4 p-2 bg-red-100 text-red-600 rounded">
          {{ error }}
        </div>

        <form @submit.prevent="addTask">
          <div class="grid items-center w-full gap-4">
            <div class="flex flex-col space-y-1.5">
              <Label for="task">Task Title</Label>
              <Input 
                id="task" 
                v-model="newTask" 
                placeholder="Enter your title" 
                required
              />
              
              <Label for="taskDescription">Task Description</Label>
              <Input 
                id="taskDescription" 
                v-model="taskDescription" 
                placeholder="Enter your task description" 
              />
            </div>
          </div>
          <Button type="submit" class="mt-4">Add Task</Button>
        </form>
        
        <ul class="mt-4">
          <li 
            v-for="(task, index) in tasks" 
            :key="task.id" 
            class="flex justify-between items-center p-2 mb-2 border rounded"
          >
            <div class="flex items-center gap-2">
              <input
                type="checkbox"
                :checked="task.Completed"
                @change="toggleComplete(task)"
                class="form-checkbox h-4 w-4"
              />
              <div :class="{ 'line-through': task.Completed }">
                <div class="font-medium">{{ task.Title }}</div>
                <div class="text-sm text-gray-600">{{ task.Description }}</div>
              </div>
            </div>
            <Button 
              variant="outline" 
              @click="removeTask(task.id, index)"
            >
              Remove
            </Button>
          </li>
        </ul>
      </CardContent>
    </Card>
    </div>
  </div>
</template>